# -*- coding: utf-8 -*-
"""Project2_MaddyArend.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1LE67_c-moXazpC0WJY5MbqavW0Tu2RR0
"""

# Maddy Arend
# Project #2
# Diabetes Dataset

# import libraries
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from statsmodels.formula.api import logit
from sklearn.model_selection import train_test_split

# import data
diabetes = pd.read_csv('diabetes data.csv')

# print first 10 rows of data
diabetes.head(10)

# get shape of data
diabetes.shape
# 253,680 rows, 22 columns

# get column names
diabetes.columns

# print summary statistics of data
diabetes.describe()

"""**Predictor Variables:** I will use physical health (PhysHlth), BMI, cholesterol (HighChol), and smoker status as predictor variables in my model.

Physical Health: A higher physical health rating out of 30 indicates a high instance of illness or injury. This illness could be corrlated to a diabetes diagnosis.

BMI: Being overweight puts a person at risk of getting diabetes, so a high BMI may be a predictor of diabetes.

Cholesterol: A high cholesterol could be an indicator of an unhealthy diet, which puts a person at risk of getting diabetes.

Smoker: Smoking puts a person at higher risk of getting diabetes, so this may be a good predictor.
"""

# explore relationships between diabetes diagnosis and numeric predictor variables (PhysHlth and BMI)

# create column with string version of diabetes diagnosis
diabetes['diabetes_str'] = np.where(diabetes["Diabetes_binary"] == 0, "No diabetes", "Pre-diabetes or Diabetes") # create column of chart that prints diabetes diagnosis as a string
diabetes.head() # print first five rows of data

# sort diabetes data by diagnosis
diabetes_sort = diabetes.sort_values('diabetes_str')

# get average bmi for each diagnosis group
avg_bmi_by_diag = diabetes_sort.groupby('diabetes_str')['BMI'].mean() #group the data by diagnosis, then get average BMI for each group
print(avg_bmi_by_diag) # print averages

# create bar chart of average bmi by diagnosis group
plt.bar(avg_bmi_by_diag.index, avg_bmi_by_diag) # create bar chart with the two diagnosis groups on the x axis and the average bmi on the y axis
plt.xlabel("Diabetes Diagnosis") # label the x axis
plt.ylabel("Average BMI") # label the y axis
plt.title("Average BMI by Diabetes Diagnosis") # title the graph
plt.show() # show the plot

"""This bar chart indicates that those diagnosed with pre-diabetes or diabetes, on average, have a higher BMI than those not diagnosed with diabetes."""

# get average physhealth rating by diagnosis group
avg_physhlth_by_diagnosis = diabetes_sort.groupby('diabetes_str')['PhysHlth'].mean() # group the data by diagnosis, then get average physhlth rating for each group
print(avg_physhlth_by_diagnosis) # print the averages

# make bar graph comparing averages
plt.bar(avg_physhlth_by_diagnosis.index, avg_physhlth_by_diagnosis)
plt.xlabel('Diabetes Diagnosis')
plt.ylabel('Average Physical Health Rating')
plt.title('Average Physical Health Rating by Diabetes Diagnosis')
plt.show()

"""The bar chart indicates that, on average, those diagnosed with pre-diabetes or diabetes reported their physical health being not good on more days in the past month than those not diagnosed with diabetes."""

# explore relationship between diabetes diagnosis and categorical variables (smoker status and high cholesterol)

# subset rows where diabetes diagnosis is positive
pos_diagnosis_rows = diabetes[diabetes['Diabetes_binary'] == 1]
pos_diagnosis_rows.head() # print first 5 rows of positive diagnoses

# get count of how many total positive diagnoses there are
pos_diagnosis_rows.shape
# there are 35,346 positive diagnoses in the data

# get count of smokers with diabetes diagnosis
smokers_count = (pos_diagnosis_rows['Smoker'] == 1).sum() # count of smokers with diabetes diagnosis
print(smokers_count) # print the count

# find percentage of patients diagnosed with diabetes who are also smokers
(18317 /35346 ) * 100
# 51.8% of patients diagnosed with diabetes are also smokers

# create pie chart showing out of those diagnosed with diabetes, how many are smokers? (extra point)

non_smokers_count = (pos_diagnosis_rows['Smoker'] == 0).sum() # count of non-smokers with diabetes diagnosis

labels = ['Smokers (51.8%)', 'Non-Smokers (48.2%)'] # create label list
sizes = [smokers_count, non_smokers_count] # create size list using non_smokers_count and smokers_count (created above)

# Plotting the pie chart
plt.pie(sizes, labels=labels)
plt.title('Proportion of Smokers Among Those Diagnosed with Diabetes')
plt.show()

# subset rows where diabetes diagnosis is positive and high cholesterol is positive
pos_diagnosis_highchol_rows = diabetes[(diabetes['Diabetes_binary'] == 1) & (diabetes['HighChol'] == 1)]
pos_diagnosis_highchol_rows.head() # print first 5 rows of the filtered data

# get count of people with high cholesterol and diabetes diagnosis
highchol_count = (pos_diagnosis_rows['HighChol'] == 1).sum() # count of people with high cholesterol and diabetes diagnosis
print(highchol_count) # print the count

# find percentage of patients diagnosed with diabetes who also have high cholesterol
(23686 / 35346) * 100
# 67.0% of patients diagnosed with diabetes also have high cholesterol

# create pie chart showing out of those diagnosed with diabetes, how many have high cholesterol?

non_highchol_count = (pos_diagnosis_rows['HighChol'] == 0).sum() # count of people without high cholesterol but with diabetes diagnosis

labels1 = ['High Cholesterol (67.0%)', 'Regular Cholesterol (33.0%)'] # create label list
sizes1 = [highchol_count, non_highchol_count] # create size list using non_highchol_count and highchol_count (created above)

# Plotting the pie chart
plt.pie(sizes1, labels=labels1)
plt.title('Proportion of People with High Cholesterol Among Those Diagnosed with Diabetes')
plt.show()

"""**Task #1: Build a multivariate logistic regression model using the statmodel library**"""

# run the logistic regression using the logit function
diabetes_reg = logit('Diabetes_binary ~ BMI + PhysHlth + Smoker + HighChol', data = diabetes).fit()

# print results of the regression
print(diabetes_reg.summary())

# get the exponential values of the intercept and coefficients to interpret odds ratios
np.exp(diabetes_reg.params)

"""Interpretation:

For a one unit increase in BMI, the odds that a patient is diagnosed with pre-diabetes or diabetes are 1.07 times as large as the odds that they are not diagnosed with diabetes, holding the effects of physical health, smoker status, and high cholesterol constant.

For a one day increase in the number of days that a patient reported their health beeing not good in the past month, the odds that a patient is diagnosed with pre-diabetes or diabetes are 1.03 times as large as the odds that they are not diagnosed with diabetes, holding the effects of BMI, smoker status, and high cholesterol constant.

If a patient is a smoker, the odds that the patient is diagnosed with pre-diabetes or diabetes are 1.22 times as large as the odds that they are not diagnosed with diabetes, holding the effects of BMI, physical health, and high cholesterol constant.

If a patient has high cholesterol, the odds that the patient is diagnosed with pre-diabetes or diabetes are 2.86 times as large as the odds that they are not diagnosed with diabetes, holding the effects of BMI, smoker status, and physical health constant.

**Task #2: Build a multivariate logistic regression model using the sklearn library**
"""

# select target variable and features
x1 = diabetes[['PhysHlth', 'BMI', 'HighChol', 'Smoker']] # set independent variables (features)
y1 = diabetes['Diabetes_binary'] # set dependent variable (target)

# split data into train and test data
x1_train, x1_test, y1_train, y1_test = train_test_split(x1, y1, train_size = 0.8, random_state = 10) # use train_test_split function to use 80% of data to train model and 20% to test it

# import logistic regression function from sklearn library
from sklearn.linear_model import LogisticRegression

# create a logistic regression classifier for the model
clf = LogisticRegression()

# train the model by fitting the train data to the logistic regression classifier
clf.fit(x1_train, y1_train)

# print coefficients and intercept of the model
print("Coefficients:", clf.coef_) # printing coefficients
print("Intercept:", clf.intercept_) # printing intercept

# use the model to make predictions of diabetes diagnosis based on test data
y1_pred = clf.predict(x1_test) # feed model with x_test data to get predicted y values (diagnoses)

# calculate and print accuracy of model
accuracy2 = clf.score(x1_test, y1_test) # use .score function to get accuracy score of model when used on test data
print("Accuracy:", accuracy2) # print accuracy score calculated above

# create and print a confusion matrix using confusion_matrix function
from sklearn.metrics import confusion_matrix
cm = confusion_matrix(y1_test, y1_pred)
cm

# create a heatmap using the confusion matrix
sns.heatmap(cm, annot=True, cmap='Blues', cbar=True) # use heatmap function from seaborn to create graphic
plt.xlabel('Predicted') # label x axis
plt.ylabel('Actual') # label y axis
plt.show() # show plot

# get an overall report of the accuracy of the model's predictions
from sklearn.metrics import classification_report # import necessary function from sklearn
report = classification_report(y1_test, y1_pred) # use classification_report function to create a report of the four model prediction accuracy scores
print(report) # print the report

"""Interpretation:

Accuracy: My model predicts 86% of the diagnoses in the test data correctly.

Precision: My model correctly identifies 48% of the diagnoses of pre-diabetes or diabetes.

Recall: My model correctly captures 5% of the diagnoses of pre-diabetes or diabetes.

F1-score: The harmonic mean of my model's precision and recall scores is 9%.
"""